{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Here is the schedule of the lessons for the Laboratory session of Computational Thinking 2020/2021 Date Time Title 23/10/20 12:30-14:30 Getting started with Python 28/10/20 9:30-11:30 Programming in Python - the basics 11/11/20 9:30-11:30 Working with lists and tuples 16/11/20 9:30-11:30 Working with unordered structures 25/11/20 9:30-11:30 ... 30/11/20 9:30-11:30 ... 04/12/20 12:30-14:30 ... 11/12/20 12:30-14:30 ...","title":"Home"},{"location":"#welcome","text":"Here is the schedule of the lessons for the Laboratory session of Computational Thinking 2020/2021 Date Time Title 23/10/20 12:30-14:30 Getting started with Python 28/10/20 9:30-11:30 Programming in Python - the basics 11/11/20 9:30-11:30 Working with lists and tuples 16/11/20 9:30-11:30 Working with unordered structures 25/11/20 9:30-11:30 ... 30/11/20 9:30-11:30 ... 04/12/20 12:30-14:30 ... 11/12/20 12:30-14:30 ...","title":"Welcome"},{"location":"lessons/1_lesson/","text":"Getting started with Python Date: 23/10/2020 Time: 12:30-14:30 Downloading Python and PyCharm Python Go to Python Downloads . It will show Download the latest version of Python according to the OS you are using to access the browser. Click on the download button to get the latest version of Python (3.9) . On Windows In case you have been redirected to another web page. From the spreadsheet press \"Windows x86-64 executable installer file\" link to start the download. Alternatively, you can navigate to the Python Releases for Windows page and select \"Download Windows x86-64 executable installer\" from the list of releases under the Python 3.9.0 - Oct. 5, 2020 label. On Mac The download should start without any redirection. On Linux Linux users can skip this part and don't download the installer of Python. Since on the installation phase, we are going to use the Advanced Package Tool (APT) which will download and install the Python repository in one step. PyCharm Go to PyCharm home page Press the Download button in the up-right corner, which redirects you to the download page, according to the OS you are using to access the browser (Windows, Mac, or Linux). Under the label Community , press Download . Install Python Check if you have Python already installed To check if you already have the last version of Python (3.9) installed on your machine (Windows, Mac, or Linux), we are going to use a command-line interpreter - shell. Operating systems have different command-line application/interface. Windows uses Command Prompt , Mac uses Terminal , and Linux uses an application called \"Console\" or \"Terminal\" (respectively for the KDE and GNOME environments). In computing, a shell is a user interface for accessing services of an operating system. It can be a command-line interface (CLI) or a graphical user interface (GUI). It enables a user to perform several operations, such as file management, installations, run processes, monitor and configure OS. We'll use it to install packages and as an interpreter for python. a) Open the Command Line Interface (CLI) On Windows Open the Windows menu Type command in the search bar Select Command Prompt from the search results On Mac Open the Spotlight search box in the upper right-hand corner. Type terminal in the search bar Click on Terminal or just hit return if it's the first result. Note: Alternatively, go to the folder Applications/Utility and open Terminal application. On Linux Open the Dash by clicking the icon of your Linux operating system appearing in the upper-left menu Type terminal or console in the search bar Select the Terminal/Console application from the results that appear b) Check Python version Type python --version (also python -V on Windows) in the command line and press return to see whether you have a default version of Python (2.7) already installed. If you don't have python installed, you should get an error message. Mac comes usually with Python 2.7 installed, hence the shell will show the current installed version. For instance: python --version Python 2.7.3 Type python3 --version (also python3 -V on Windows) in the command line and press return to check whether you have Python 3 installed, and eventually which version. Run the installer On Windows Double-click on the Python installer previously downloaded. A dialog box like the one below will appear Click on Customize installation On the following page you should keep all the checkboxes selected, and move to the next page Now you should be in the Advanced Options page. Here you need to keep checked the default options with the addition of these two check-boxes (if not already checked): Install for all users , and Add python to environment varaibles . Make sure the Customize install location has been also updated Click on the Install button, and wait until the end of the installation Finally, go to the command line and try to type python --version (also python3 -V ) and press return to check whether you correctly installed Python. On Mac Double-click on the downloaded .pkg file to start the wizard. Follow the instructions. Finally, go to the command line and try to type python --version (also python3 --version in case you have installed also Python 2) and press return to check whether you correctly installed Python. On Linux Open the Command Line Interface (Terminal or Console) Type sudo apt-get update Type sudo apt-get install python3.9 python3-pip Finally, go to the command line and try to type python --version (also python3 --version in case you have installed also Python 2) and press return to check whether you correctly installed Python. Note: in case you find troubles in the process, check the following instructions according to your specific Linux distribution Play with Python in the shell Windows, Mac, and Linux users can use the shell as a Python interpreter. The interpreter is the program you\u2019ll need to run Python code and scripts. Technically, the interpreter is a layer of software that works between your program and your computer hardware to get your code running. Type python (or python3 ) in the shell. You'll see in the first line which version of python is installed. If it still shows you python 2.X , type exit() and press return to exit python, and type python3 to access the latest version of python installed on your computer. In the second line you will see >>> . This means you accessed python in interactive mode and you can now type your commands to be executed by the shell. Type print(\"Hello world\") and press enter. >>> print(\"Hello world\") Hello World Type exit() and press return to exit python interactive mode. Install Python libraries A text file containing Python code that is intended to be directly executed by the user is called script . A file that contains Python code that is designed to be imported and used from another Python file, is called module/library . Some libraries/modules (e.g. csv and collections ) are built-ins, meaning you do not need to install them, while others, developed by the larger community, must be downloaded and installed. We can install python libraries using the pip command in the shell. pip is a package management system used to install and manage software packages written in Python. You will use it whenever you want to install a Python library. In case you also have Python 2 installed on your machine, pip is renamed in pip3 . Type pip --version in the shell to see which version is actually installed on your machine. Note (for Windows) : If not installed, follow the instructions here to find where and which version is installed. Install modules with pip3 We will see how to install networkx and anytree . To install networkx type pip3 install networkx in the shell. To install e.g. anytree type pip3 install anytree in the shell. Note: you can also type pip3 install -U <module_name> the -U option will upgrade all packages to the newest available version. Whenever you want to install a library, look for the documentation page and the official name of the package to be used in the shell. Here is the list of libraries/packages you'll need to install for the hands-on classes. beautifulSoup (bs4) fuzzywuzzy requests nltk nltk.data Install PyCharm PyCharm is a lightweight IDE (Integrated Development Environment) for Python. It includes a rich text editor, an interpreter for python, a way to access the shell, and allows you to save your scripts (as .py files). > Windows Unpack the tar.gz folder previously downloaded (see Downloading Python and PyCharm ) Run the pycharm-xxxxxx.exe file that starts the Installation Wizard. In the window Choose Installation location press Next . In the window Installation Options select the checkboxes Create Desktop Shourtcut and Update PATH variable (restart needed) and press Next. In the next window press Install . Select Rebooth now and press Finish . Your laptop will restart. If during the installation you selected to create a shortcut on your desktop, double-click that shortcut. Otherwise, go to the PyCharm bin folder (e.g. C:\\Program Files (x86)\\JetBrains\\PyCharm 2011\\bin ) and run pycharm.exe , pycharm6.exe , or pycharm.bat . If it prompts to import settings select do not import settings . Agree and sign the license, press Continue . Install the plugins you may want to have (e.g. Markdown support) > Mac Double-click the downloaded .dmg file (see Downloading Python and PyCharm ) Drag and drop the icon in Application folder. In the Application folder, double-click the PyCharm icon to open the editor. If it prompts to import settings select do not import settings . Agree and sign the license, press Continue . Install the plugins you may want to have (e.g. Markdown support) > Linux Unpack the tar.gz folder previously downloaded (see Downloading Python and PyCharm ) Enter the unpacked folder and go to bin subdirectory You need to run the pycharm.sh file. You should access the bin directory from shell using the cd command and run it from shell with sh pycharm.sh command. Alternatively, to run a .sh file form GUI, check the guidelines provided at the following link Note: you can also check the above installations guidelines on the Pycharm Installation Guide Create your first project in PyCharm Click on Create New Project Change the location and the name of the project folder as you wish Click on the Dropdown menu Project interpreter: existing interpreter Select the checkbox Existing interpreter and Double-click on the ... icon on the right to open a new window On the left column select System interpreter . In the up right bar you will see the path to your interpreter (i.e. the ..\\python.exe file for windows users) Press OK, and when you are back in the prior window finally press Create Note: you can also check the Instructions to configure the interpreter in PyCharm Create and run a Python script Right click on the folder of your project and select File > New > Python file . Input hello_world as a name of your file. It will create hello_world.py in your project folder (see the left column) In the editor type your command print(\"hello world\") and press Cmd+S (on Mac) or CTRL+s (on Windows) to save changes to the file. From the menu select Run > Run . In the interactive window select the name of your file hello_world . In the bottom part of the editor will appear the result.","title":"1. Getting started with Python"},{"location":"lessons/1_lesson/#getting-started-with-python","text":"","title":"Getting started with Python"},{"location":"lessons/1_lesson/#downloading-python-and-pycharm","text":"","title":"Downloading Python and PyCharm"},{"location":"lessons/1_lesson/#python","text":"Go to Python Downloads . It will show Download the latest version of Python according to the OS you are using to access the browser. Click on the download button to get the latest version of Python (3.9) .","title":"Python"},{"location":"lessons/1_lesson/#pycharm","text":"Go to PyCharm home page Press the Download button in the up-right corner, which redirects you to the download page, according to the OS you are using to access the browser (Windows, Mac, or Linux). Under the label Community , press Download .","title":"PyCharm"},{"location":"lessons/1_lesson/#install-python","text":"","title":"Install Python"},{"location":"lessons/1_lesson/#check-if-you-have-python-already-installed","text":"To check if you already have the last version of Python (3.9) installed on your machine (Windows, Mac, or Linux), we are going to use a command-line interpreter - shell. Operating systems have different command-line application/interface. Windows uses Command Prompt , Mac uses Terminal , and Linux uses an application called \"Console\" or \"Terminal\" (respectively for the KDE and GNOME environments). In computing, a shell is a user interface for accessing services of an operating system. It can be a command-line interface (CLI) or a graphical user interface (GUI). It enables a user to perform several operations, such as file management, installations, run processes, monitor and configure OS. We'll use it to install packages and as an interpreter for python.","title":"Check if you have Python already installed"},{"location":"lessons/1_lesson/#run-the-installer","text":"","title":"Run the installer"},{"location":"lessons/1_lesson/#play-with-python-in-the-shell","text":"Windows, Mac, and Linux users can use the shell as a Python interpreter. The interpreter is the program you\u2019ll need to run Python code and scripts. Technically, the interpreter is a layer of software that works between your program and your computer hardware to get your code running. Type python (or python3 ) in the shell. You'll see in the first line which version of python is installed. If it still shows you python 2.X , type exit() and press return to exit python, and type python3 to access the latest version of python installed on your computer. In the second line you will see >>> . This means you accessed python in interactive mode and you can now type your commands to be executed by the shell. Type print(\"Hello world\") and press enter. >>> print(\"Hello world\") Hello World Type exit() and press return to exit python interactive mode.","title":"Play with Python in the shell"},{"location":"lessons/1_lesson/#install-python-libraries","text":"A text file containing Python code that is intended to be directly executed by the user is called script . A file that contains Python code that is designed to be imported and used from another Python file, is called module/library . Some libraries/modules (e.g. csv and collections ) are built-ins, meaning you do not need to install them, while others, developed by the larger community, must be downloaded and installed. We can install python libraries using the pip command in the shell. pip is a package management system used to install and manage software packages written in Python. You will use it whenever you want to install a Python library. In case you also have Python 2 installed on your machine, pip is renamed in pip3 . Type pip --version in the shell to see which version is actually installed on your machine. Note (for Windows) : If not installed, follow the instructions here to find where and which version is installed.","title":"Install Python libraries"},{"location":"lessons/1_lesson/#install-modules-with-pip3","text":"We will see how to install networkx and anytree . To install networkx type pip3 install networkx in the shell. To install e.g. anytree type pip3 install anytree in the shell. Note: you can also type pip3 install -U <module_name> the -U option will upgrade all packages to the newest available version. Whenever you want to install a library, look for the documentation page and the official name of the package to be used in the shell. Here is the list of libraries/packages you'll need to install for the hands-on classes. beautifulSoup (bs4) fuzzywuzzy requests nltk nltk.data","title":"Install modules with pip3"},{"location":"lessons/1_lesson/#install-pycharm","text":"PyCharm is a lightweight IDE (Integrated Development Environment) for Python. It includes a rich text editor, an interpreter for python, a way to access the shell, and allows you to save your scripts (as .py files).","title":"Install PyCharm"},{"location":"lessons/1_lesson/#create-your-first-project-in-pycharm","text":"Click on Create New Project Change the location and the name of the project folder as you wish Click on the Dropdown menu Project interpreter: existing interpreter Select the checkbox Existing interpreter and Double-click on the ... icon on the right to open a new window On the left column select System interpreter . In the up right bar you will see the path to your interpreter (i.e. the ..\\python.exe file for windows users) Press OK, and when you are back in the prior window finally press Create Note: you can also check the Instructions to configure the interpreter in PyCharm","title":"Create your first project in PyCharm"},{"location":"lessons/1_lesson/#create-and-run-a-python-script","text":"Right click on the folder of your project and select File > New > Python file . Input hello_world as a name of your file. It will create hello_world.py in your project folder (see the left column) In the editor type your command print(\"hello world\") and press Cmd+S (on Mac) or CTRL+s (on Windows) to save changes to the file. From the menu select Run > Run . In the interactive window select the name of your file hello_world . In the bottom part of the editor will appear the result.","title":"Create and run a Python script"},{"location":"lessons/2_lesson/","text":"Programming in Python - the basics Date: 28/10/2020 Time: 09:30-11:30 Syntax in Python Variables Python does not require you to define the type of variables, just declare them a = 2 Some keywords cannot be used for naming variables. Can not start with a digit or contain a special symbol (|\u00a3$%@# etc.) False | class | finally | is | return | None | continue | for | lambda | try | True | def | from | nonlocal | while | and | del | global | not | with | as | elif | if | or | yield | assert | else | import | pass | break | except | in | raise Python is case sensitive variable != Variable Some good practises for naming a variable: Combine lowercase letters (a-z) uppercase letters (A-Z), digits (1-9) and underscore (_) Use camelCase( thisIsMyVariable ) or underscore to separate words ( this_is_my_variable ) Use names that make sense count = 10 rather than c = 10 Punctuation and indentation You don't need to add punctuation at the end of lines. a = 2 b = 3 Use semicolons in case you want to put multiple statements in a single line a = 2 ; b = 3 Use indentation to separate code blocks (use tabs or 4 whitespaces) a = 2 if a > 1: print(a) Document your code using comments # a comment to describe the variable assignment a = 2 # a comment to describe the if condition if a > 1: print(a) Data types Numbers # Integers a = int(5) # Floating point numbers a = float(5.0) # Complex numbers a = complex(5+2j) Strings s = \"This is a string\" s = str(25) Lists # This is a list myList = ['three', 'two', 'one'] # To print the value 'two' print(myList[1]) # To sort the list myList = sorted(myList) # Now myList = ['one', 'three', 'two'] print(myList) # Add a new item to the list myList.append('star') # Now myList = ['one', 'three', 'two', 'star'] print(myList) # Count how many elements we have in a list myList_length = len(myList) # the value of myList_length is 4 print(myList_length) The Print command x = 5 print(x) print(\"The value of x is \",x) print(\"The value of x is \"+str(x)) y = 2 print(\"The value of x is {} and the value of y is {}\".format(str(x),str(y))) Operators Arithmetic operators x = 5 y = 2 # + Add two operands or unary plus print(x+y) # - Subtract right operand from the left or unary minus print(x-y) # * Multiply two operands print(x*y) # / Divide left operand by the right one (always results into float) print(x/y) # % Modulus - remainder of the division of left operand by the right (remainder of x/y) print(x%y) # // Floor division - division that results into whole number adjusted to the left in the number line print(x//y) # ** Exponent - left operand raised to the power of right (x to the power y) print(x**y) Comparison operators x = 5 y = 2 # > Greater than - True if left operand is greater than the right print(x > y) # < Less than - True if left operand is less than the right print(x < y) # == Equal to - True if both operands are equal print(x == y) # != Not equal to - True if operands are not equal print(x != y) # >= Greater than or equal to - True if left operand is greater than or equal to the right print(x >= y) # < = Less than or equal to - True if left operand is less than or equal to the right print(x < = y) Logic operators x = True y = False # \"and\": True if both the operands are true print(x and y) # \"or\": True if either of the operands is true x or y print(x or y) # \"not\": True if operand is false (complements the operand) print(not x) Assignment operators # with \"=\" x = 5 print(x) # with \"+=\" x += 5 print(x) # with \"-=\" x -= 2 print(x) # Try with other arithmetic operands ... Membership operators my_list = [5,2,4,2] x = 4 # \"in\": True if value/variable is found in the sequence print(x in my_list) # \"not in\": True if value/variable is not found in the sequence print(x not in my_list) Conditional statement A decision might be taken only when a specific condition is satisfied num = 3 if num >= 0: print(\"Positive or Zero\") else: print(\"Negative number\") Functions A block of code which defines a specific algorithm and runs only when it is called. # def {func_name}({parameter_1}, {parameter_2}, ...) def add(num1, num2): return num1 + num2 my_sum = add(5,4) print(my_sum) Exercises ( check the exercises on the github repository ) 1st Exercise Define a function is_friend_of_harry() which returns a True value if a given name (String) is one of the friends of Harry Potter, otherwise the function must return False . Lets pretend the friends of Harry Potter are: \"Ron\", \"Hermione\", \"Hagrid\", and \"Dumbledore\" . Example: Calling the function this way: is_friend_of_harry(\"Malfoy\") should return a False value a) Check if the following people are friends of Harry: \"Hagrid\", \"Voldemort\", and \"Bellatrix\" . Print True/False for each check. Mark the box to see the solution def is_friend_of_harry(p_name): friends_list = [\"Ron\", \"Hermione\", \"Hagrid\", \"Dumbledore\"] if p_name in friends_list: return True else: return False print(is_friend_of_harry(\"Hagrid\")) print(is_friend_of_harry(\"Voldemort\")) print(is_friend_of_harry(\"Bellatrix\")) b) Print \"Harry has a friend!\" if at least one of the previous characters is friend of Harry, otherwise print \"Harry has no friends!\" . Mark the box to see the solution a = is_friend_of_harry(\"Hagrid\") b = is_friend_of_harry(\"Voldemort\") c = is_friend_of_harry(\"Bellatrix\") if a or b or c: print(\"Harry has a friend!\") else: print(\"Harry has no friends!!\") c) Lets make our function is_friend_of_harry() a bit more powerful. Such that if I type a name in lowercase (e.g. \"ron\") or if I use spaces at the end of the name (e.g. \"Ron \"), or even if I do both the things, the function should work the same. Hint: On python {string}.lower() transforms a string to its lowercase form; {string}.strip() removes the starting and ending whitespaces (if any); and {string}.capitalize() capitalizes the first letter of a string Mark the box to see the solution def is_friend_of_harry(p_name): friends_list = [\"Ron\", \"Hermione\", \"Hagrid\", \"Dumbledore\"] p_name = p_name.lower() p_name = p_name.strip() p_name = p_name.capitalize() if p_name in friends_list: return True else: return False d) Define another is_prof_friend_of_harry() which returns a True value if a given name is a professor and a friend of Harry, otherwise the function must return False . Lets pretend the professors of Harry Potter are: \"Snape\", \"Lupin\", \"Hagrid\", and \"Dumbledore\" . Mark the box to see the solution def is_prof_friend_of_harry(p_name): prof_list = [\"Snape\", \"Lupin\", \"Hagrid\", \"Dumbledore\"] if p_name in prof_list: if is_friend_of_harry(p_name): return True else: return False else: return False print(is_friend_of_harry(\"Hagrid\")) print(is_friend_of_harry(\"Voldemort\")) print(is_friend_of_harry(\"Bellatrix\")) 2nd Exercise Each house of Hogwarts has a score which is updated based on actions such as performance in class and rule violations. Lets pretend we have a list of the houses houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"] and another list containing the score of each house scores = [0,0,0,0] , such that the score value in position N of the scores list belongs to the house in position N of the houses list . a) Define a update_house_score() function which increments/decrements the score of a specific house with a given points. The function takes three parameters: house_name , action (string value \"positive\"/\"negative\"), and points . Example: Calling the function this way: update_house_score(\"Gryffindor\",\"positive\",5) should increment the score of house Gryffindor by 5 points. Hint: The function {list}.index({value}) returns the index of an element in the list, e.g. houses.index(\"Hufflepuff\") equals 1 Mark the box to see the solution houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"] scores = [0,0,0,0] def update_house_score(house_name,action,points): index = houses.index(house_name) if action == \"positive\": scores[index] += points else: scores[index] -= points b) After the Quidditch cup the Houses has incresed/decresed their scores as follow: +10 Gryffindor, +7 Hufflepuff, -3 Slytherin. After the game a member of house \"Slytherin\" made a good action and the house gained back 5 points. Update the houses points following these actions, and print the two lists. Mark the box to see the solution update_house_score(\"Gryffindor\",\"positive\",10) update_house_score(\"Hufflepuff\",\"positive\",7) update_house_score(\"Slytherin\",\"negative\",3) update_house_score(\"Slytherin\",\"positive\",5) print(houses) print(scores)","title":"2. Programming in Python - the basics"},{"location":"lessons/2_lesson/#programming-in-python-the-basics","text":"","title":"Programming in Python - the basics"},{"location":"lessons/2_lesson/#syntax-in-python","text":"","title":"Syntax in Python"},{"location":"lessons/2_lesson/#variables","text":"Python does not require you to define the type of variables, just declare them a = 2 Some keywords cannot be used for naming variables. Can not start with a digit or contain a special symbol (|\u00a3$%@# etc.) False | class | finally | is | return | None | continue | for | lambda | try | True | def | from | nonlocal | while | and | del | global | not | with | as | elif | if | or | yield | assert | else | import | pass | break | except | in | raise Python is case sensitive variable != Variable Some good practises for naming a variable: Combine lowercase letters (a-z) uppercase letters (A-Z), digits (1-9) and underscore (_) Use camelCase( thisIsMyVariable ) or underscore to separate words ( this_is_my_variable ) Use names that make sense count = 10 rather than c = 10","title":"Variables"},{"location":"lessons/2_lesson/#punctuation-and-indentation","text":"You don't need to add punctuation at the end of lines. a = 2 b = 3 Use semicolons in case you want to put multiple statements in a single line a = 2 ; b = 3 Use indentation to separate code blocks (use tabs or 4 whitespaces) a = 2 if a > 1: print(a) Document your code using comments # a comment to describe the variable assignment a = 2 # a comment to describe the if condition if a > 1: print(a)","title":"Punctuation and indentation"},{"location":"lessons/2_lesson/#data-types","text":"","title":"Data types"},{"location":"lessons/2_lesson/#the-print-command","text":"x = 5 print(x) print(\"The value of x is \",x) print(\"The value of x is \"+str(x)) y = 2 print(\"The value of x is {} and the value of y is {}\".format(str(x),str(y)))","title":"The Print command"},{"location":"lessons/2_lesson/#operators","text":"","title":"Operators"},{"location":"lessons/2_lesson/#conditional-statement","text":"A decision might be taken only when a specific condition is satisfied num = 3 if num >= 0: print(\"Positive or Zero\") else: print(\"Negative number\")","title":"Conditional statement"},{"location":"lessons/2_lesson/#functions","text":"A block of code which defines a specific algorithm and runs only when it is called. # def {func_name}({parameter_1}, {parameter_2}, ...) def add(num1, num2): return num1 + num2 my_sum = add(5,4) print(my_sum)","title":"Functions"},{"location":"lessons/2_lesson/#exercises","text":"( check the exercises on the github repository )","title":"Exercises"},{"location":"lessons/2_lesson/#1st-exercise","text":"Define a function is_friend_of_harry() which returns a True value if a given name (String) is one of the friends of Harry Potter, otherwise the function must return False . Lets pretend the friends of Harry Potter are: \"Ron\", \"Hermione\", \"Hagrid\", and \"Dumbledore\" . Example: Calling the function this way: is_friend_of_harry(\"Malfoy\") should return a False value a) Check if the following people are friends of Harry: \"Hagrid\", \"Voldemort\", and \"Bellatrix\" . Print True/False for each check. Mark the box to see the solution def is_friend_of_harry(p_name): friends_list = [\"Ron\", \"Hermione\", \"Hagrid\", \"Dumbledore\"] if p_name in friends_list: return True else: return False print(is_friend_of_harry(\"Hagrid\")) print(is_friend_of_harry(\"Voldemort\")) print(is_friend_of_harry(\"Bellatrix\")) b) Print \"Harry has a friend!\" if at least one of the previous characters is friend of Harry, otherwise print \"Harry has no friends!\" . Mark the box to see the solution a = is_friend_of_harry(\"Hagrid\") b = is_friend_of_harry(\"Voldemort\") c = is_friend_of_harry(\"Bellatrix\") if a or b or c: print(\"Harry has a friend!\") else: print(\"Harry has no friends!!\") c) Lets make our function is_friend_of_harry() a bit more powerful. Such that if I type a name in lowercase (e.g. \"ron\") or if I use spaces at the end of the name (e.g. \"Ron \"), or even if I do both the things, the function should work the same. Hint: On python {string}.lower() transforms a string to its lowercase form; {string}.strip() removes the starting and ending whitespaces (if any); and {string}.capitalize() capitalizes the first letter of a string Mark the box to see the solution def is_friend_of_harry(p_name): friends_list = [\"Ron\", \"Hermione\", \"Hagrid\", \"Dumbledore\"] p_name = p_name.lower() p_name = p_name.strip() p_name = p_name.capitalize() if p_name in friends_list: return True else: return False d) Define another is_prof_friend_of_harry() which returns a True value if a given name is a professor and a friend of Harry, otherwise the function must return False . Lets pretend the professors of Harry Potter are: \"Snape\", \"Lupin\", \"Hagrid\", and \"Dumbledore\" . Mark the box to see the solution def is_prof_friend_of_harry(p_name): prof_list = [\"Snape\", \"Lupin\", \"Hagrid\", \"Dumbledore\"] if p_name in prof_list: if is_friend_of_harry(p_name): return True else: return False else: return False print(is_friend_of_harry(\"Hagrid\")) print(is_friend_of_harry(\"Voldemort\")) print(is_friend_of_harry(\"Bellatrix\"))","title":"1st Exercise"},{"location":"lessons/2_lesson/#2nd-exercise","text":"Each house of Hogwarts has a score which is updated based on actions such as performance in class and rule violations. Lets pretend we have a list of the houses houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"] and another list containing the score of each house scores = [0,0,0,0] , such that the score value in position N of the scores list belongs to the house in position N of the houses list . a) Define a update_house_score() function which increments/decrements the score of a specific house with a given points. The function takes three parameters: house_name , action (string value \"positive\"/\"negative\"), and points . Example: Calling the function this way: update_house_score(\"Gryffindor\",\"positive\",5) should increment the score of house Gryffindor by 5 points. Hint: The function {list}.index({value}) returns the index of an element in the list, e.g. houses.index(\"Hufflepuff\") equals 1 Mark the box to see the solution houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"] scores = [0,0,0,0] def update_house_score(house_name,action,points): index = houses.index(house_name) if action == \"positive\": scores[index] += points else: scores[index] -= points b) After the Quidditch cup the Houses has incresed/decresed their scores as follow: +10 Gryffindor, +7 Hufflepuff, -3 Slytherin. After the game a member of house \"Slytherin\" made a good action and the house gained back 5 points. Update the houses points following these actions, and print the two lists. Mark the box to see the solution update_house_score(\"Gryffindor\",\"positive\",10) update_house_score(\"Hufflepuff\",\"positive\",7) update_house_score(\"Slytherin\",\"negative\",3) update_house_score(\"Slytherin\",\"positive\",5) print(houses) print(scores)","title":"2nd Exercise"},{"location":"lessons/3_lesson/","text":"Working with lists and tuples Date: 11/11/2020 Time: 09:30-11:30 Tuples Similar to lists, but their values can\u2019t be modified numbers = (10,30,50,70) print(numbers[2]) #ERROR: assignment is not allowed numbers[2] = 55 Loops: \"while\" and \"for\" Loops are used in order to repeat similar actions. We can't loop forever this will make our program crash Our loops need a rule/condition that defines when they need to stop The \"while\" statement While the condition is true execute the inner code. We use it when we don't know the number of times/repetitions we need to execute our code until a specific condition is met a = 0 while a < 10 : print(a) a += 1 The \"for\" statement Repeat the inner code for a number of times We use it when we already know how many times/repetitions we need to execute our code In python a for loop is done its execution when it finishes iterating a given sequence for a in range(0,10): print(a) Exercises ( check the exercises on the github repository ) 1st Exercise Let's pretend we have a list containing the titles of all the Computational Thinking lessons. The list is ordered following the established schedule. Below is the list: l_schedule = [\"Introduction to Computational Thinking\",\"Algorithms\",\"Computability\",\"Programming Languages\",\"Laboratory\",\"Organising information: ordered structures\",\"Laboratory\",\"Brute-force algorithms\",\"Organising information: unordered structures\",\"Laboratory\",\"Recursion\",\"Laboratory\",\"Divide and conquer algorithms\",\"Dynamic programming algorithms\",\"Laboratory\",\"Organising information: trees\",\"Laboratory\",\"Backtracking algorithms\",\"Laboratory\",\"Organising information: graphs\",\"Laboratory\",\"Project: specification\",\"Greedy algorithms\"] a) Define a function named lab_lessons() which takes l_schedule as a parameter and returns the total number of \"Laboratory\" lessons. Mark the box to see the solution def lab_lessons(a_list): count = 0 for title in a_list: if title == \"Laboratory\": count += 1 return count b) Define a function named all_before_lab() which takes l_schedule as a parameter and returns a list containing all the lessons scheduled before the first \"Laboratory\" lesson. Mark the box to see the solution def all_before_lab(a_list): result = [] i = 0 title = a_list[i] while title != \"Laboratory\": result.append(title) i += 1 title = a_list[i] return result c) Define a function named all_before_lab_n() which takes l_schedule and a number n as parameters, and returns a list containing all the lessons scheduled before the n th laboratory lesson. (the returned list should also include the laboratory lessons) Mark the box to see the solution def all_before_lab_n(a_list,n): result = [] i = 0 count_lab = 0 while count_lab < n: title = a_list[i] result.append(title) if title == \"Laboratory\": count_lab += 1 i += 1 return result d) Let's pretend we have a new list representing an extended version of the l_schedule , such that it embeds information about the date and the duration (in hours) of the each lesson. We call the new list l_schedule_extended and each of its elements is represented as a tuple: ([DATE],[HOURS],[TITLE]) . For instance, the second lesson \"Algorithms\" will have the corresponding tuple: (\"16/10/20\",2,\"Algorithms\") . Here we have the entire l_schedule_extended : l_schedule_extended = [ (\"14/10/20\",2,\"Introduction to Computational Thinking\"), (\"16/10/20\",2,\"Algorithms\"), (\"19/10/20\",2,\"Computability\"), (\"21/10/20\",2,\"Programming Languages\"), (\"23/10/20\",2,\"Laboratory\"), (\"26/10/20\",2,\"Organising information: ordered structures\"), (\"28/10/20\",2,\"Laboratory\"), (\"30/10/20\",2,\"Brute-force algorithms\"), (\"09/11/20\",2,\"Organising information: unordered structures\"), (\"11/11/20\",2,\"Laboratory\"), (\"13/11/20\",2,\"Recursion\"), (\"16/11/20\",2,\"Laboratory\"), (\"20/11/20\",2,\"Divide and conquer algorithms\"), (\"23/11/20\",2,\"Dynamic programming algorithms\"), (\"25/11/20\",2,\"Laboratory\"), (\"27/11/20\",2,\"Organising information: trees\"), (\"30/11/20\",2,\"Laboratory\"), (\"02/12/20\",2,\"Backtracking algorithms\"), (\"04/12/20\",2,\"Laboratory\"), (\"09/12/20\",2,\"Organising information: graphs\"), (\"11/12/20\",2,\"Laboratory\"), (\"14/12/20\",2,\"Project: specification\"), (\"16/12/20\",2,\"Greedy algorithms\") ] Define a function max_lessons_hours() which takes l_schedule_extended and a number max_hours as parameters, and returns a list containing only the titles of all the lessons which could be attended with a maximum number of hours = max_hours , starting from the first lesson of the year. Mark the box to see the solution def max_lessons_hours(a_list, max_hours): result = [] tot_hours = 0 i = 0 while tot_hours < max_hours: title = a_list[i][2] result.append(title) tot_hours += a_list[i][1] i += 1 return result","title":"3. Working with lists and tuples"},{"location":"lessons/3_lesson/#working-with-lists-and-tuples","text":"","title":"Working with lists and tuples"},{"location":"lessons/3_lesson/#tuples","text":"Similar to lists, but their values can\u2019t be modified numbers = (10,30,50,70) print(numbers[2]) #ERROR: assignment is not allowed numbers[2] = 55","title":"Tuples"},{"location":"lessons/3_lesson/#loops-while-and-for","text":"Loops are used in order to repeat similar actions. We can't loop forever this will make our program crash Our loops need a rule/condition that defines when they need to stop","title":"Loops: \"while\" and \"for\""},{"location":"lessons/3_lesson/#the-while-statement","text":"While the condition is true execute the inner code. We use it when we don't know the number of times/repetitions we need to execute our code until a specific condition is met a = 0 while a < 10 : print(a) a += 1","title":"The \"while\" statement"},{"location":"lessons/3_lesson/#the-for-statement","text":"Repeat the inner code for a number of times We use it when we already know how many times/repetitions we need to execute our code In python a for loop is done its execution when it finishes iterating a given sequence for a in range(0,10): print(a)","title":"The \"for\" statement"},{"location":"lessons/3_lesson/#exercises","text":"( check the exercises on the github repository )","title":"Exercises"},{"location":"lessons/3_lesson/#1st-exercise","text":"Let's pretend we have a list containing the titles of all the Computational Thinking lessons. The list is ordered following the established schedule. Below is the list: l_schedule = [\"Introduction to Computational Thinking\",\"Algorithms\",\"Computability\",\"Programming Languages\",\"Laboratory\",\"Organising information: ordered structures\",\"Laboratory\",\"Brute-force algorithms\",\"Organising information: unordered structures\",\"Laboratory\",\"Recursion\",\"Laboratory\",\"Divide and conquer algorithms\",\"Dynamic programming algorithms\",\"Laboratory\",\"Organising information: trees\",\"Laboratory\",\"Backtracking algorithms\",\"Laboratory\",\"Organising information: graphs\",\"Laboratory\",\"Project: specification\",\"Greedy algorithms\"] a) Define a function named lab_lessons() which takes l_schedule as a parameter and returns the total number of \"Laboratory\" lessons. Mark the box to see the solution def lab_lessons(a_list): count = 0 for title in a_list: if title == \"Laboratory\": count += 1 return count b) Define a function named all_before_lab() which takes l_schedule as a parameter and returns a list containing all the lessons scheduled before the first \"Laboratory\" lesson. Mark the box to see the solution def all_before_lab(a_list): result = [] i = 0 title = a_list[i] while title != \"Laboratory\": result.append(title) i += 1 title = a_list[i] return result c) Define a function named all_before_lab_n() which takes l_schedule and a number n as parameters, and returns a list containing all the lessons scheduled before the n th laboratory lesson. (the returned list should also include the laboratory lessons) Mark the box to see the solution def all_before_lab_n(a_list,n): result = [] i = 0 count_lab = 0 while count_lab < n: title = a_list[i] result.append(title) if title == \"Laboratory\": count_lab += 1 i += 1 return result d) Let's pretend we have a new list representing an extended version of the l_schedule , such that it embeds information about the date and the duration (in hours) of the each lesson. We call the new list l_schedule_extended and each of its elements is represented as a tuple: ([DATE],[HOURS],[TITLE]) . For instance, the second lesson \"Algorithms\" will have the corresponding tuple: (\"16/10/20\",2,\"Algorithms\") . Here we have the entire l_schedule_extended : l_schedule_extended = [ (\"14/10/20\",2,\"Introduction to Computational Thinking\"), (\"16/10/20\",2,\"Algorithms\"), (\"19/10/20\",2,\"Computability\"), (\"21/10/20\",2,\"Programming Languages\"), (\"23/10/20\",2,\"Laboratory\"), (\"26/10/20\",2,\"Organising information: ordered structures\"), (\"28/10/20\",2,\"Laboratory\"), (\"30/10/20\",2,\"Brute-force algorithms\"), (\"09/11/20\",2,\"Organising information: unordered structures\"), (\"11/11/20\",2,\"Laboratory\"), (\"13/11/20\",2,\"Recursion\"), (\"16/11/20\",2,\"Laboratory\"), (\"20/11/20\",2,\"Divide and conquer algorithms\"), (\"23/11/20\",2,\"Dynamic programming algorithms\"), (\"25/11/20\",2,\"Laboratory\"), (\"27/11/20\",2,\"Organising information: trees\"), (\"30/11/20\",2,\"Laboratory\"), (\"02/12/20\",2,\"Backtracking algorithms\"), (\"04/12/20\",2,\"Laboratory\"), (\"09/12/20\",2,\"Organising information: graphs\"), (\"11/12/20\",2,\"Laboratory\"), (\"14/12/20\",2,\"Project: specification\"), (\"16/12/20\",2,\"Greedy algorithms\") ] Define a function max_lessons_hours() which takes l_schedule_extended and a number max_hours as parameters, and returns a list containing only the titles of all the lessons which could be attended with a maximum number of hours = max_hours , starting from the first lesson of the year. Mark the box to see the solution def max_lessons_hours(a_list, max_hours): result = [] tot_hours = 0 i = 0 while tot_hours < max_hours: title = a_list[i][2] result.append(title) tot_hours += a_list[i][1] i += 1 return result","title":"1st Exercise"},{"location":"lessons/4_lesson/","text":"Working with unordered structures Date: 16/11/2020 Time: 09:30-11:30 Sets What is it about? A collection of unordered and unindexed items Why do we need it? We use Sets in order to have a collection without duplicates What else should I know? The items of a set can't be accessed by referring to an index or a key It can contain only immutable data types, e.g. strings, numbers, or tuples # create a set of string items a_set = {\"Roma\", \"Torino\", \"Bologna\"} # create a set from a list a_set = set([\"Roma\", \"Torino\", \"Bologna\",\"Roma\"]) # add an item to the set a_set.add(\"Palermo\") # remove an item from the set a_set.remove(\"Palermo\") # raise an error if the item isn't found a_set.discard(\"Palermo\") # doesn't raise errors if the item isn't found #ERROR: we can't add a mutable item to the set a_set.add([\"Rimini\",\"Firenze\"]) # some operations: union, intersection, difference ... etc b_set = {\"Napoli\", \"Bari\", \"Lecce\", \"Roma\"} new_set = a_set.union(b_set) #OUTPUT: {'Bari', 'Bologna', 'Lecce', 'Napoli', 'Roma', 'Torino'} new_set = a_set.intersection(b_set) #OUTPUT: {'Roma'} new_set = a_set.difference(b_set) #OUTPUT: {'Bologna', 'Torino'} Dictionaries What is it about? A data structure that can store data in the form of key-value pairs Why do we need it? It provides an efficient and useful way for organizing the data under specific typologies (keys) What else should I know? The items of a dictionary are accessed by specifying a key The key values should be immutable data types, e.g. strings, numbers, or tuples A dictionary can't contain duplicate keys # create a dictionary ages_dict = {} # add a new (key,value) pair ages_dict[\"Marco\"] = 25 ages_dict[\"Alessia\"] = 22 ages_dict[\"Giulia\"] = 21 #OUTPUT: {'Marco': 25, 'Alessia':22, 'Giulia':21} # accessing an item print(ages_dict[\"Marco\"]) # remove an item from the dictionary del ages_dict[\"Marco\"] # important methods ages_dict.items() #returns a sequence of (key,value) pairs #OUTPUT: [('Alessia',22),('Giulia',21)] a_dict = {\"Pippo\":34} ages_dict.update(a_dict) #updates ages_dict with the (key,value) pairs of a_dict #OUTPUT: {'Alessia': 22, 'Giulia':21, 'Pippo':34} Exercises ( check the exercises on the github repository ) 1st Exercise We define the variable lyrics containing the lyrics (string value) of the song \"Lonely Boy\" of \"The Black Keys\". The words are all written in lowercase and the lines are separated by ;; lyrics = \"well i\u2019m so above you ;; and it\u2019s plain to see ;; but i came to love you anyway ;; so you pulled my heart out ;; and i don\u2019t mind bleeding ;; any old time you keep me waiting ;; waiting, waiting ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting ;; well your mama kept you but your daddy left you ;; and i should\u2019ve done you just the same ;; but i came to love you ;; am i born to bleed? ;; any old time you keep me waiting ;; waiting, waiting ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting ;; hey! ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting\" a) We want to print all the unique words in the lyrics of the song \"Lonely Boy\". We also want to exclude the following words from the final set: ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] . Define a function clean_lyrics() which takes lyrics as parameter and returns a clean set of words (as just described). Call the defined function and print the new returned set. Hint: On python {string}.split({separator}) splits a string into a list of words using {separator} as splitter between the words in the string Example: Calling \"Hi my name is James\".split(\" \") returns the following list [\"Hi\", \"my\", \"name\", \"is\", \"James\"] Mark the box to see the solution def clean_lyrics(txt_lyrics): lyrics_set = set(txt_lyrics.split(\" \")) unwated_list = ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] unwanted_set = set(unwated_list) clean_set = lyrics_set.difference(unwanted_set) return clean_set my_set = clean_lyrics(lyrics) print(my_set) b) Define a function common_words() which takes the clean version of lyrics (result of point (a)) as parameter. The function should count and return the number of words that are also part of the following list [\"mama\",\"daddy\",\"sister\",\"brother\",\"boy\",\"girl\"] . Mark the box to see the solution def common_words(clean_set): l_words = [\"mama\",\"daddy\",\"sister\",\"brother\",\"boy\",\"girl\"] s_words = set(l_words) common_set = clean_set.intersection(s_words) return len(common_set) print(common_words(my_set)) 2nd Exercise We want to further analyse the lyrics of the 1st Exercise considering the same variable lyrics . a) Define a function count_words() which takes lyrics as parameter and returns a dictionary of all the words with a corresponding number to indicate the count of the occurrences in the song lyrics. The dictionary should not consider and contain the following words ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] . Mark the box to see the solution def count_words(txt_lyrics): result_dict = {} lyrics_l = txt_lyrics.split(\" \") unwated_list = ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] for w in lyrics_l: if w not in unwated_list: if w not in result_dict: result_dict[w] = 0 result_dict[w] += 1 return result_dict count_dict = count_words(lyrics) print(count_dict) b) Andrea wants to build a clever organization for its playlist of \"The Black Keys\". He used to write first the name of the album followed by the title of the song and separating the two values using \"::\" (e.g. el_camino::lonely_boy the album name is \"el_camino\" while \"lonely_boy\" is the song title). Here we have the entire playlist of Andrea, the songs are separated using \";;\": playlist_txt = \"el_camino::lonely_boy ;; el_camino::little_black_submarine ;; el_camino::gold_on_the_ceiling ;; turn_blue::fever ;; turn_blue::gotta_get_away ;; brothers::howlin_for_you ;; brothers::tighten_up ;; turn_blue::it_is_up_to_you_now\" Define a function build_playlist_dict() which takes playlist_txt as a parameter and creates a dictionary having the album titles as keys while for each key (album) the dictionary associates a list of all its corresponding songs. Mark the box to see the solution playlist_txt = \"el_camino::lonely_boy ;; el_camino::little_black_submarine ;; el_camino::gold_on_the_ceiling ;; turn_blue::fever ;; turn_blue::gotta_get_away ;; brothers::howlin_for_you ;; brothers::tighten_up ;; turn_blue::it_is_up_to_you_now\" def build_playlist_dict(a_txt): result_dict = {} songs = a_txt.split(\" ;; \") for a_song in songs: song_parts = a_song.split(\"::\") album = song_parts[0] song_name = song_parts[1] if album not in result_dict: result_dict[album] = [] result_dict[album].append(song_name) return result_dict print(build_playlist_dict(playlist_txt))","title":"4. Working with unordered structures"},{"location":"lessons/4_lesson/#working-with-unordered-structures","text":"","title":"Working with unordered structures"},{"location":"lessons/4_lesson/#sets","text":"What is it about? A collection of unordered and unindexed items Why do we need it? We use Sets in order to have a collection without duplicates What else should I know? The items of a set can't be accessed by referring to an index or a key It can contain only immutable data types, e.g. strings, numbers, or tuples # create a set of string items a_set = {\"Roma\", \"Torino\", \"Bologna\"} # create a set from a list a_set = set([\"Roma\", \"Torino\", \"Bologna\",\"Roma\"]) # add an item to the set a_set.add(\"Palermo\") # remove an item from the set a_set.remove(\"Palermo\") # raise an error if the item isn't found a_set.discard(\"Palermo\") # doesn't raise errors if the item isn't found #ERROR: we can't add a mutable item to the set a_set.add([\"Rimini\",\"Firenze\"]) # some operations: union, intersection, difference ... etc b_set = {\"Napoli\", \"Bari\", \"Lecce\", \"Roma\"} new_set = a_set.union(b_set) #OUTPUT: {'Bari', 'Bologna', 'Lecce', 'Napoli', 'Roma', 'Torino'} new_set = a_set.intersection(b_set) #OUTPUT: {'Roma'} new_set = a_set.difference(b_set) #OUTPUT: {'Bologna', 'Torino'}","title":"Sets"},{"location":"lessons/4_lesson/#dictionaries","text":"What is it about? A data structure that can store data in the form of key-value pairs Why do we need it? It provides an efficient and useful way for organizing the data under specific typologies (keys) What else should I know? The items of a dictionary are accessed by specifying a key The key values should be immutable data types, e.g. strings, numbers, or tuples A dictionary can't contain duplicate keys # create a dictionary ages_dict = {} # add a new (key,value) pair ages_dict[\"Marco\"] = 25 ages_dict[\"Alessia\"] = 22 ages_dict[\"Giulia\"] = 21 #OUTPUT: {'Marco': 25, 'Alessia':22, 'Giulia':21} # accessing an item print(ages_dict[\"Marco\"]) # remove an item from the dictionary del ages_dict[\"Marco\"] # important methods ages_dict.items() #returns a sequence of (key,value) pairs #OUTPUT: [('Alessia',22),('Giulia',21)] a_dict = {\"Pippo\":34} ages_dict.update(a_dict) #updates ages_dict with the (key,value) pairs of a_dict #OUTPUT: {'Alessia': 22, 'Giulia':21, 'Pippo':34}","title":"Dictionaries"},{"location":"lessons/4_lesson/#exercises","text":"( check the exercises on the github repository )","title":"Exercises"},{"location":"lessons/4_lesson/#1st-exercise","text":"We define the variable lyrics containing the lyrics (string value) of the song \"Lonely Boy\" of \"The Black Keys\". The words are all written in lowercase and the lines are separated by ;; lyrics = \"well i\u2019m so above you ;; and it\u2019s plain to see ;; but i came to love you anyway ;; so you pulled my heart out ;; and i don\u2019t mind bleeding ;; any old time you keep me waiting ;; waiting, waiting ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting ;; well your mama kept you but your daddy left you ;; and i should\u2019ve done you just the same ;; but i came to love you ;; am i born to bleed? ;; any old time you keep me waiting ;; waiting, waiting ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting ;; hey! ;; oh, oh-oh i got a love that keeps me waiting ;; oh, oh-oh i got a love that keeps me waiting ;; i\u2019m a lonely boy ;; i\u2019m a lonely boy ;; oh, oh-oh i got a love that keeps me waiting\" a) We want to print all the unique words in the lyrics of the song \"Lonely Boy\". We also want to exclude the following words from the final set: ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] . Define a function clean_lyrics() which takes lyrics as parameter and returns a clean set of words (as just described). Call the defined function and print the new returned set. Hint: On python {string}.split({separator}) splits a string into a list of words using {separator} as splitter between the words in the string Example: Calling \"Hi my name is James\".split(\" \") returns the following list [\"Hi\", \"my\", \"name\", \"is\", \"James\"] Mark the box to see the solution def clean_lyrics(txt_lyrics): lyrics_set = set(txt_lyrics.split(\" \")) unwated_list = ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] unwanted_set = set(unwated_list) clean_set = lyrics_set.difference(unwanted_set) return clean_set my_set = clean_lyrics(lyrics) print(my_set) b) Define a function common_words() which takes the clean version of lyrics (result of point (a)) as parameter. The function should count and return the number of words that are also part of the following list [\"mama\",\"daddy\",\"sister\",\"brother\",\"boy\",\"girl\"] . Mark the box to see the solution def common_words(clean_set): l_words = [\"mama\",\"daddy\",\"sister\",\"brother\",\"boy\",\"girl\"] s_words = set(l_words) common_set = clean_set.intersection(s_words) return len(common_set) print(common_words(my_set))","title":"1st Exercise"},{"location":"lessons/4_lesson/#2nd-exercise","text":"We want to further analyse the lyrics of the 1st Exercise considering the same variable lyrics . a) Define a function count_words() which takes lyrics as parameter and returns a dictionary of all the words with a corresponding number to indicate the count of the occurrences in the song lyrics. The dictionary should not consider and contain the following words ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] . Mark the box to see the solution def count_words(txt_lyrics): result_dict = {} lyrics_l = txt_lyrics.split(\" \") unwated_list = ['', 'a', 'i', 'am', 'to', ';;', 'the', 'you', 'don\u2019t', 'and', 'that', 'i\u2019m', 'it\u2019s'] for w in lyrics_l: if w not in unwated_list: if w not in result_dict: result_dict[w] = 0 result_dict[w] += 1 return result_dict count_dict = count_words(lyrics) print(count_dict) b) Andrea wants to build a clever organization for its playlist of \"The Black Keys\". He used to write first the name of the album followed by the title of the song and separating the two values using \"::\" (e.g. el_camino::lonely_boy the album name is \"el_camino\" while \"lonely_boy\" is the song title). Here we have the entire playlist of Andrea, the songs are separated using \";;\": playlist_txt = \"el_camino::lonely_boy ;; el_camino::little_black_submarine ;; el_camino::gold_on_the_ceiling ;; turn_blue::fever ;; turn_blue::gotta_get_away ;; brothers::howlin_for_you ;; brothers::tighten_up ;; turn_blue::it_is_up_to_you_now\" Define a function build_playlist_dict() which takes playlist_txt as a parameter and creates a dictionary having the album titles as keys while for each key (album) the dictionary associates a list of all its corresponding songs. Mark the box to see the solution playlist_txt = \"el_camino::lonely_boy ;; el_camino::little_black_submarine ;; el_camino::gold_on_the_ceiling ;; turn_blue::fever ;; turn_blue::gotta_get_away ;; brothers::howlin_for_you ;; brothers::tighten_up ;; turn_blue::it_is_up_to_you_now\" def build_playlist_dict(a_txt): result_dict = {} songs = a_txt.split(\" ;; \") for a_song in songs: song_parts = a_song.split(\"::\") album = song_parts[0] song_name = song_parts[1] if album not in result_dict: result_dict[album] = [] result_dict[album].append(song_name) return result_dict print(build_playlist_dict(playlist_txt))","title":"2nd Exercise"},{"location":"lessons/pre/","text":"Download tools Before the first laboratory session, we ask you to download two specific tools, i.e. Python and PyCharm, that will be used during the laboratory and, generally speaking, during the whole course. You have only to download them, while we will install them all together during the first laboratory session. Python Navigate to the Python Downloads page: https://www.python.org/downloads/ . It will show Download the latest version of Python according to the OS you are using to access the browser. Click on the download button to get the latest version of Python (3.9). On Windows Alternatively, you can navigate to the Python Releases for Windows page ( https://www.python.org/downloads/windows/ ) and select \"Download Windows x86-64 executable installer\" from the list of releases under the Python 3.9.0 - Oct. 5, 2020 label. On Mac The download should start without any redirection. On Linux Linux users can skip this part and don't download the installer of Python. Since on the installation phase, we are going to use the Advanced Package Tool (APT) which will download and install the Python repository in one step. PyCharm Go to the PyCharm home page: https://www.jetbrains.com/pycharm/ Press the Download button in the up-right corner, which redirects you to the download page, according to the OS you are using to access the browser (Windows, Mac, or Linux). Under the label Community, press Download.","title":"Download tools"},{"location":"lessons/pre/#download-tools","text":"Before the first laboratory session, we ask you to download two specific tools, i.e. Python and PyCharm, that will be used during the laboratory and, generally speaking, during the whole course. You have only to download them, while we will install them all together during the first laboratory session.","title":"Download tools"},{"location":"lessons/pre/#python","text":"Navigate to the Python Downloads page: https://www.python.org/downloads/ . It will show Download the latest version of Python according to the OS you are using to access the browser. Click on the download button to get the latest version of Python (3.9).","title":"Python"},{"location":"lessons/pre/#on-windows","text":"Alternatively, you can navigate to the Python Releases for Windows page ( https://www.python.org/downloads/windows/ ) and select \"Download Windows x86-64 executable installer\" from the list of releases under the Python 3.9.0 - Oct. 5, 2020 label.","title":"On Windows"},{"location":"lessons/pre/#on-mac","text":"The download should start without any redirection.","title":"On Mac"},{"location":"lessons/pre/#on-linux","text":"Linux users can skip this part and don't download the installer of Python. Since on the installation phase, we are going to use the Advanced Package Tool (APT) which will download and install the Python repository in one step.","title":"On Linux"},{"location":"lessons/pre/#pycharm","text":"Go to the PyCharm home page: https://www.jetbrains.com/pycharm/ Press the Download button in the up-right corner, which redirects you to the download page, according to the OS you are using to access the browser (Windows, Mac, or Linux). Under the label Community, press Download.","title":"PyCharm"}]}